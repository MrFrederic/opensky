"""temp_check

Revision ID: fe2721414a15
Revises: 8edff6f0f89b
Create Date: 2025-07-10 09:33:24.994024

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'fe2721414a15'
down_revision = '8edff6f0f89b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('manifest_equipment')
    op.drop_index('ix_equipment_id', table_name='equipment')
    op.drop_table('equipment')
    op.drop_table('tandem_slots')
    op.drop_table('jump_equipment')
    op.drop_index('ix_jumps_id', table_name='jumps')
    op.drop_table('jumps')
    op.drop_index('ix_loads_id', table_name='loads')
    op.drop_table('loads')
    op.drop_index('ix_tandem_bookings_id', table_name='tandem_bookings')
    op.drop_table('tandem_bookings')
    op.drop_index('ix_manifests_id', table_name='manifests')
    op.drop_table('manifests')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('manifests',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('manifests_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('jump_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'APPROVED', 'DECLINED', name='manifeststatus'), autoincrement=False, nullable=True),
    sa.Column('decline_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tandem_booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='manifests_created_by_fkey'),
    sa.ForeignKeyConstraint(['jump_type_id'], ['dictionary_values.id'], name='manifests_jump_type_id_fkey'),
    sa.ForeignKeyConstraint(['tandem_booking_id'], ['tandem_bookings.id'], name='manifests_tandem_booking_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='manifests_updated_by_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='manifests_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='manifests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_manifests_id', 'manifests', ['id'], unique=False)
    op.create_table('tandem_bookings',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tandem_bookings_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('booking_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('CONFIRMED', 'CANCELLED', name='tandembookingstatus'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='tandem_bookings_created_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='tandem_bookings_updated_by_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='tandem_bookings_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tandem_bookings_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tandem_bookings_id', 'tandem_bookings', ['id'], unique=False)
    op.create_table('loads',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('loads_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('load_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='loads_created_by_fkey'),
    sa.ForeignKeyConstraint(['status_id'], ['dictionary_values.id'], name='loads_status_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='loads_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='loads_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_loads_id', 'loads', ['id'], unique=False)
    op.create_table('jumps',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('jumps_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('passenger_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('load_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('jump_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payment_status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('manifest_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='jumps_created_by_fkey'),
    sa.ForeignKeyConstraint(['jump_type_id'], ['dictionary_values.id'], name='jumps_jump_type_id_fkey'),
    sa.ForeignKeyConstraint(['load_id'], ['loads.id'], name='jumps_load_id_fkey'),
    sa.ForeignKeyConstraint(['manifest_id'], ['manifests.id'], name='jumps_manifest_id_fkey'),
    sa.ForeignKeyConstraint(['passenger_id'], ['users.id'], name='jumps_passenger_id_fkey'),
    sa.ForeignKeyConstraint(['payment_status_id'], ['dictionary_values.id'], name='jumps_payment_status_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='jumps_updated_by_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='jumps_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='jumps_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_jumps_id', 'jumps', ['id'], unique=False)
    op.create_table('jump_equipment',
    sa.Column('jump_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('equipment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipment_id'], ['equipment.id'], name='jump_equipment_equipment_id_fkey'),
    sa.ForeignKeyConstraint(['jump_id'], ['jumps.id'], name='jump_equipment_jump_id_fkey'),
    sa.PrimaryKeyConstraint('jump_id', 'equipment_id', name='jump_equipment_pkey')
    )
    op.create_table('tandem_slots',
    sa.Column('slot_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_slots', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='tandem_slots_created_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='tandem_slots_updated_by_fkey'),
    sa.PrimaryKeyConstraint('slot_date', name='tandem_slots_pkey')
    )
    op.create_table('equipment',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('equipment_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('serial_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='equipment_created_by_fkey'),
    sa.ForeignKeyConstraint(['name_id'], ['dictionary_values.id'], name='equipment_name_id_fkey'),
    sa.ForeignKeyConstraint(['status_id'], ['dictionary_values.id'], name='equipment_status_id_fkey'),
    sa.ForeignKeyConstraint(['type_id'], ['dictionary_values.id'], name='equipment_type_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='equipment_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='equipment_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_equipment_id', 'equipment', ['id'], unique=False)
    op.create_table('manifest_equipment',
    sa.Column('manifest_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('equipment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['equipment_id'], ['equipment.id'], name='manifest_equipment_equipment_id_fkey'),
    sa.ForeignKeyConstraint(['manifest_id'], ['manifests.id'], name='manifest_equipment_manifest_id_fkey'),
    sa.PrimaryKeyConstraint('manifest_id', 'equipment_id', name='manifest_equipment_pkey')
    )
    # ### end Alembic commands ###
